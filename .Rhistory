ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point() +
scale_x_discrete(breaks = seq(2001, 2015, 1)) +  theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all_cdd %>%
ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point() +
scale_x_discrete(breaks = seq(2001, 2015, 1)) +  theme_bw()
all_cdd %>%
ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point() +
scale_x_discrete(breaks = seq(2001, 2015, 1))
all_cdd %>%
ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point() +
scale_x_discrete()
all_cdd %>%
ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point()
all_cdd %>%
ggplot(aes(x = year, y = mean_poverty_rate, color = as.factor(cdd_year))) +
geom_point() +
labs(title = "Average Poverty Rate Over time for all Villages Setting Up CDD in Each Year From 2005 to 2010",
x = "Year",
y = "Average Poverty Rate",
color = "CDD year")
# A panel fixed effects regression
omit_2010 <- all_cdd %>%
filter(cdd_year =/= 2010) %>%
# A panel fixed effects regression
omit_2010 <- all_cdd %>%
filter(cdd_year =! 2010) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
# A panel fixed effects regression
omit_2010 <- all_cdd %>%
filter(cdd_year ==! 2010) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
panel2 <- feols(poverty_rate ~ D | village_id + year,
data = omit_2010, cluster = ~village_id)
# A panel fixed effects regression
omit_2010 <- df %>%
filter(cdd_year ==! 2010 & !is.na(cdd_year)) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
panel2 <- feols(poverty_rate ~ D | village_id + year,
data = omit_2010, cluster = ~village_id)
omit_2010
# A panel fixed effects regression
omit_2010 <- df %>%
filter(cdd_year == 2010 & !is.na(cdd_year)) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
omit_2010
# A panel fixed effects regression
omit_2010 <- df %>%
filter(cdd_year !== 2010 & !is.na(cdd_year)) %>%
# A panel fixed effects regression
omit_2010 <- df %>%
filter(cdd_year == !2010 & !is.na(cdd_year)) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
omit_2010
# A panel fixed effects regression
omit_2010 <- df %>%
filter(cdd_year != 2010 & !is.na(cdd_year)) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
omit_2010
panel2 <- feols(poverty_rate ~ D | village_id + year,
data = omit_2010, cluster = ~village_id)
etable(panel2)
# event study regression
df <- df %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year))) %>%
mutate(ever_treated = case_when(!is.na(cdd_year) ~ 1,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA)),
event_time = ifelse(!is.na(cdd_year), year - cdd_year, 0))
# i() is how you specify an interaction for feols
# i(event_time, ever_treated) is equivalent to writing as.factor(event_time) * as.factor(ever_treated)
es <- feols(poverty_rate ~ i(event_time, ever_treated, ref = -1) | village_id + year,
cluster = ~village_id,
data = df)
etable(df)
# i() is how you specify an interaction for feols
# i(event_time, ever_treated) is equivalent to writing as.factor(event_time) * as.factor(ever_treated)
es <- feols(poverty_rate ~ i(event_time, ever_treated, ref = -1) | village_id + year,
cluster = ~village_id,
data = df)
etable(df)
etable(es)
iplot(es, type = "coef", error_bars = TRUE)
etable(es)
iplot(es, type = "coef", error_bars = TRUE)
# Using regression (no fixed effects)
cdd_2005_never <- df %>%
filter(cdd_year == 2005 | all(is.na(cdd_year))) %>%
group_by(village_id) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
model2 <- lm(poverty_rate ~ D + year, data = cdd_2005_never)
summary(model2)
panel <- feols(poverty_rate ~ D | village_id,
data = cdd_2005_never, cluster = ~village_id)
etable(panel)
# Using regression (no fixed effects)
cdd_2005_never <- df %>%
filter(cdd_year == 2005 | all(is.na(cdd_year))) %>%
group_by(village_id) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
model2 <- lm(poverty_rate ~ D + year, data = cdd_2005_never)
summary(model2)
panel <- feols(poverty_rate ~ D | village_id,
data = cdd_2005_never, cluster = ~village_id)
etable(panel)
panel <- feols(poverty_rate ~ D | village_id + year,
data = cdd_2005_never, cluster = ~year)
# Using regression (no fixed effects)
cdd_2005_never <- df %>%
filter(cdd_year == 2005 | all(is.na(cdd_year))) %>%
group_by(village_id) %>%
mutate(D = case_when(!is.na(cdd_year) & year >= cdd_year ~ 1,
!is.na(cdd_year) & year < cdd_year ~ 0,
is.na(cdd_year) ~ 0,
TRUE ~ as.numeric(NA))) %>%
mutate(year = as.numeric(as.character(year)),
cdd_year = as.numeric(as.character(cdd_year)))
model2 <- lm(poverty_rate ~ D + year, data = cdd_2005_never)
panel <- feols(poverty_rate ~ D | village_id,
data = cdd_2005_never, cluster = ~village_id)
etable(panel)
panel <- feols(poverty_rate ~ D | year,
data = cdd_2005_never, cluster = ~year)
etable(panel)
panel2 <- feols(poverty_rate ~ D | village_id + year,
data = omit_2010, cluster = ~village_id)
etable(panel2)
a <- function(x){
return(na)
}
b <- map(.x = data.frame(99), f= a)
library(tidyverse)
b <- map(.x = data.frame(99), f= a)
b <- map(.x = data.frame(99), .f= a)
b <- map(.x = data.frame(a=99), .f= a)
# Run the app
shinyApp(ui = ui, server = server)
shiny::runApp('Documents/GitHub/problem-set-2-chaeyeonguc')
shiny::runApp()
# Define ui
ui <- fluidPage(
titlePanel("Location of Public Schools by Safety Scores in Chicago"),
sidebarLayout(
sidebarPanel(
numericInput(
inputId = "safety_input",
label = "Enter safety score and I will show you public schools over it",
value = 0,
min = 0,
max = 100
)
),
mainPanel(
plotlyOutput("school_plot")
)
)
)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(sf)
library(shiny)
library(shinyFeedback)
library(plotly)
library(styler)
style_file("/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc/app.R")
# Define ui
ui <- fluidPage(
titlePanel("Location of Public Schools by Safety Scores in Chicago"),
sidebarLayout(
sidebarPanel(
numericInput(
inputId = "safety_input",
label = "Enter safety score and I will show you public schools over it",
value = 0,
min = 0,
max = 100
)
),
mainPanel(
plotlyOutput("school_plot")
)
)
)
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(Safety.Score, LONGITUDE, LATITUDE)
public_schools <- public_schools %>%
select(`Safety Score`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
public_schools_sf
public_schools
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
public_schools
## A warning if value is negative or over 100
value <- reactive({
is_positive <- input$safety_input >= 0
is_under_100 <- input$safety_input <= 100
feedbackWarning("safety_input", !is_positive, "Please enter a positive number.")
feedbackWarning("safety_input", !is_under_100, "Please enter under 100 score")
rep(is_positive, is_under_100)
})
# Define server logic
server <- function(input, output, session) {
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
## A warning if value is negative or over 100
value <- reactive({
is_positive <- input$safety_input >= 0
is_under_100 <- input$safety_input <= 100
feedbackWarning("safety_input", !is_positive, "Please enter a positive number.")
feedbackWarning("safety_input", !is_under_100, "Please enter under 100 score")
rep(is_positive, is_under_100)
})
## Render the plot
output$school_plot <- renderPlotly({
ggplot() +
geom_sf(data = zip_codes) +
geom_sf(data = public_schools_sf, aes(fill = `Safety Score`), shape = 21, size = 2) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
title = "Public Schools by Safety Scores in Chicago",
x = "Longitude", y = "Latitude",
fill = "Safety Score",
caption = "Source: City of Chicago"
) +
theme_minimal()
})
}
# Run the app
shinyApp(ui = ui, server = server)
## A warning if value is negative or over 100
value <- reactive({
public_schools_sf %>%
filter(`Safety Score` >= input$safety_input)
is_positive <- input$safety_input >= 0
is_under_100 <- input$safety_input <= 100
feedbackWarning("safety_input", !is_positive, "Please enter a positive number.")
feedbackWarning("safety_input", !is_under_100, "Please enter under 100 score")
rep(is_positive, is_under_100)
})
# Define server logic
server <- function(input, output, session) {
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
## A warning if value is negative or over 100
value <- reactive({
public_schools_sf %>%
filter(`Safety Score` >= input$safety_input)
is_positive <- input$safety_input >= 0
is_under_100 <- input$safety_input <= 100
feedbackWarning("safety_input", !is_positive, "Please enter a positive number.")
feedbackWarning("safety_input", !is_under_100, "Please enter under 100 score")
rep(is_positive, is_under_100)
})
## Render the plot
output$school_plot <- renderPlotly({
ggplot() +
geom_sf(data = zip_codes) +
geom_sf(data = public_schools_sf, aes(fill = `Safety Score`), shape = 21, size = 2) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
title = "Public Schools by Safety Scores in Chicago",
x = "Longitude", y = "Latitude",
fill = "Safety Score",
caption = "Source: City of Chicago"
) +
theme_minimal()
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define ui
ui <- fluidPage(
titlePanel("Location of Public Schools by Safety Scores in Chicago"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "safety_input",
label = "Enter safety score and I will show you public schools over it",
value = 0
),
selectInput(inputId = "school_input", label = "School", choices = NULL)
),
mainPanel(
plotlyOutput("school_plot")
)
)
)
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, `Name of School`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
## Subset based on user-inputted safety score
public_schools_sf_updated <- reactive({
public_schools_sf %>% filter(`Safety Score` >= as.numeric(input$safety_input))
})
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
# Define server logic
server <- function(input, output, session) {
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, `Name of School`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
## Subset based on user-inputted safety score
public_schools_sf_updated <- reactive({
public_schools_sf %>% filter(`Safety Score` >= as.numeric(input$safety_input))
})
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
## Render the plot
output$school_plot <- renderPlotly({
ggplot() +
geom_sf(data = zip_codes) +
geom_sf(data = public_schools_sf, aes(fill = `Safety Score`), shape = 21, size = 2) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
title = "Public Schools by Safety Scores in Chicago",
x = "Longitude", y = "Latitude",
fill = "Safety Score",
caption = "Source: City of Chicago"
) +
theme_minimal()
})
}
# Define server logic
server <- function(input, output, session) {
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, `Name of School`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
## Subset based on user-inputted safety score
public_schools_sf_updated <- reactive({
public_schools_sf %>% filter(`Safety Score` >= as.numeric(input$safety_input))
})
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
## Render the plot
output$school_plot <- renderPlotly({
ggplot() +
geom_sf(data = zip_codes) +
geom_sf(data = public_schools_sf_updated(), aes(fill = `Safety Score`), shape = 21, size = 2) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
title = "Public Schools by Safety Scores in Chicago",
x = "Longitude", y = "Latitude",
fill = "Safety Score",
caption = "Source: City of Chicago"
) +
theme_minimal()
})
}
# Run the app
shinyApp(ui = ui, server = server)
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
shiny::runApp()
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
public_schools_sf_updated
# Define ui
ui <- fluidPage(
titlePanel("Location of Public Schools by Safety Scores in Chicago"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "safety_input",
label = "Enter safety score and I will show you public schools over it",
value = 0
),
selectInput(inputId = "school_input", label = "School", choices = NULL)
),
mainPanel(
plotlyOutput("school_plot")
)
)
)
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
public_schools <- public_schools %>%
select(`Safety Score`, `Name of School`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
public_schools_sf <- filter(public_schools_sf, !is.na(`Safety Score`))
## Subset based on user-inputted safety score
public_schools_sf_updated <- reactive({
public_schools_sf %>% filter(`Safety Score` >= as.numeric(input$safety_input))
})
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
# Define server logic
server <- function(input, output, session) {
path <- "/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc"
public_schools <- read_csv(file.path(path, "Chicago_Public_Schools_-_Progress_Report_Cards__2011-2012__20241025.csv"))
zip_codes <- st_read(file.path(path, "geo_export_fb313970-5c89-4a00-8f7c-2f7e7ca8255d.shp"))
public_schools <- public_schools %>%
select(`Safety Score`, `Name of School`, LONGITUDE, LATITUDE)
public_schools_sf <- st_as_sf(public_schools, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(zip_codes), remove = FALSE)
public_schools_sf <- filter(public_schools_sf, !is.na(`Safety Score`))
## Subset based on user-inputted safety score
public_schools_sf_updated <- reactive({
public_schools_sf %>% filter(`Safety Score` >= as.numeric(input$safety_input))
})
## call the resulting dataframe public_schools_sf_updated
observeEvent(public_schools_sf_updated(), {
school_choices <- unique(public_schools_sf_updated()$`Name of School`)
updateSelectInput(inputId = "school_input", choices = school_choices)
})
## Render the plot
output$school_plot <- renderPlotly({
ggplot() +
geom_sf(data = zip_codes) +
geom_sf(data = public_schools_sf_updated() %>% filter(`Name of School` == input$school_input),
aes(fill = `Safety Score`), shape = 21, size = 2) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
title = "Public Schools by Safety Scores in Chicago",
x = "Longitude", y = "Latitude",
fill = "Safety Score",
caption = "Source: City of Chicago"
) +
theme_minimal()
})
}
# Run the app
shinyApp(ui = ui, server = server)
style_file("/Users/yeong/Documents/GitHub/problem-set-2-chaeyeonguc/app.R")
